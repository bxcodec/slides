Go for Scalable Microservices
Why and if you should learn Go?
Tags: golang, enterprise, beginner

Iman Tumorang
Senior Software Engineer, Xendit Inc.
iman.tumorang@gmail.com
https://bxcodec.io
twitter.com/bxcodec
medium.com/@imantumorang


* Golang

- compiled, concurrent, garbage-collected, statically typed
- small, opionionated
- efficient, scalable, and productive

.image images/gocloud.jpg
.caption _Gophers_building_a_cloud_system_ by [[https://www.instagram.com/reneefrench/][Renée French]]
.background images/devfest_content.png

: What is Go exactly? It's a compiled, concurrent, garbage-collected, statically typed language.
: It's small and opionionated, efficient, scalable, and productive.
: Go is not created to be a breakthrough in programming language design but rather
: an excellent tool for large software projects.


* Creators of Go
.image images/creators.png
.caption _Robert_Griesemer,_Rob_Pike,_Ken_Thompson_(left_to_right)_
.background images/devfest_content.png

: They are the veterans who conceived the Golang baby, with experience in the like
: of UNIX, Javascript V8 Engine

* Golang
.image images/golang-trend.png 300 800
.caption _Golang_on_Google_Trend_
.background images/devfest_content.png

: Go has captured growing traction since its creation
: But the important question is whether this growth is sustainable?
: Will it make a mark in the software world, adopted and used by the majority of
: enterprises?


* Why Golang?
.background images/devfest_content.png

* Problems addressed by Go at Google
- slow builds
- uncontrolled dependencies
- developers' opinions
- maintainability (readibility, documentation, etc)
- costly updates
- difficulty in writing automated tools
.background images/devfest_content.png

: Let's start with the problems that motivates Google to dedicate resources to give birth to Go.
: In big organisations like Google, problems like ... are very common. Go was designed with specific features addressing those issues

* Dependencies in Go
- unused dependencies as compile-time error
- no cyclic dependency

.image images/movinggopher.png
.caption _Moving_gopher_ by [[https://github.com/ashleymcnamara][Ashley McNamara]]
.background images/devfest_content.png

: single object file Approach will described later

* Unused dependencies
.image images/error.png
.background images/devfest_content.png

: This guarantees the precision in Go dependency tree, ensuring no extraneous edges
: Making it compile-time error might seem to be trivial but in my opinion, it'more
: about changing the engineering team mindset. I have seen unused import statements
: in a Java or Javascript (Typescript) program that were committed years back but no 
: one in the team bothers to remove.

* Dependencies in Go
- 50 times faster than C++ according to Go Team benchmark
.image images/compiling.png
.caption _comic_ by [[https://xkcd.com/][xkcd]]
.background images/devfest_content.png

: This approach combined with no unused nor cyclic dependency policy, Go compiler, in Rob Pike's words, "turns minutes into seconds, coffee breaks into interactive build".
: I'm so sorry that Go adoption might spell an end to our coffee breaks, but that also means we can get our work done faster and have more time to ourselves and our families.

* Deployment in Go
- Compiled a native binary in server
.image images/npm-install.jpg _ 500
.caption _comic_ by [[https://devrant.com/users/kavan][kavan]]
.background images/devfest_content.png

: With Go, it will be really easy to deploy. We just compile the application into binary and put it on the server.
: No more like breaking in the production because dependencies break. 
: Like NPM Install: run well in local, but can't run in server.
: No source code in production server
: No Need to setup the JVM 

* Go Syntax
- 25 keywords ([[https://www.geeksforgeeks.org/go-keywords/][src]])
- name before type
.code code/trivial/syntax.go /^var count/,/^type Star/
- multiple return values
.code code/trivial/syntax.go /^func FnThatReturnsMulti/
- no default argument
.background images/devfest_content.png

: Syntax in Go is design with simplicity as the first priority. Go only has 25 keywords, compared to 37 of C and 84 of C++.
: We can return multiple values from a function, which is convenient as compared to in Java, sometimes a new class is needed just for this purpose. Speaking of functions, one feature that was deliberately omitted from Go is default arguments. Defaulted arguments make it easy to patch over API design flaws, resulting in a horrible mess of arguments that are impossible to understand. The lack of default arguments force developers to define more methods which in turn makes the API clearer and more understandable. This, again, emphasizes that Go is not just another new language around the block, it's an attempt to influence engineering teams to be more productive

* Naming
Exported vs Un-exported
.code code/trivial/syntax.go /Exported/,/NotExported/
.background images/devfest_content.png

: Go took an unusual approach of defining indentifier visibility. Instead of using keywords like private or public in Java, names in Go carries the information itself - Uppercase initial letter for exported, lowercase initial letter for unexported.
: This means no more going back and forth to the declaration to discover this information. Again, simplicity for productivity.

* Tooling
- integrated within the language design
- gofmt, golint, etc
.image images/gopherswrench.jpg
.background images/devfest_content.png

: As rarely mentioned in language design discussion, tooling is as much important for a language ecosystem. And as developers, we like to wage wars over our opinions. Should we use PrettierJS or StandardJS, Airbnb or Google coding standards?
: Go put an end to this by having tooling built-in like gofmt to format source files, golint to checking code standards. Developers can then put more focus on things that matter.

* Is Go for you?
.background images/devfest_content.png

* Mind Budget
Anything that you cannot do instinctively consumes Mind Budget.

We all have limited Mind Budget.

---

Example:

If you do not know how to ride a bicycle
Learning to drive consumes Mind Budget.

If you already do know how to ride bicycle.
Riding does not consume Mind Budget,
but paying attention to the changing road conditions does.
.background images/devfest_content.png

: Anything that really new for us, will consumes mind budget
: Atau lepas tangan dari stang, sambil dada-dada, itu consume mind budget


* The same with technology

Learning many things is consuming mind budgets. 
We can learn everything, but we have a limited time and limited mind budget

Learn it if you need it to build a new things.
.background images/devfest_content.png

: But, we also have to think, even we want to reduce the mind budget consuming. We have to choose the right tools to the right problem

* Choosing the Right Tool
Because I write some stuff API Backend,
I'm expert in Java 

I want to write frontends
I can write frontends in Java 
So I don't need to learn new programming language 
.background images/devfest_content.png

* Choosing the Right Tool
.image images/hammer.jpg 96 _
Because I hammer in nails all day,
I can instinctively wield a hammer.

I want to pull out nails.
I still need to learn about pulling out nails but I don't have to learn a new tool.
.background images/devfest_content.png

* A tool's purpose
.background images/devfest_content.png

A hammer is good for:
- driving in nails
- breaking things
- striking things

---

*Go* is good for:
- writing backend servers
- being simple to read and understand
- having built-in concurrency
- being portable across Linux, Windows, Darwin (mac), ARM

* Go is somewhat familiar
.background images/devfest_content.png
  
  go: fmt.Println("Hello World!)

  c: printf("Hello World\n");

  java: System.out.println("Hello World!);

  javascript: console.log('Hello World!);

  ruby: puts 'Hello World'

  python 2: print 'Hello World'

  python 3: print('Hello World')

* Go is type-safe
.background images/devfest_content.png
.play code/typesafe1/main.go

Is javascript type-safe?

  In new browser tab, F12 to open developer console:
  
  var i = 2;
  i = 'b';

* Go is type-safe (2)
.background images/devfest_content.png
.play -edit code/typesafe2/main.go


* Two sides to a coin
.background images/devfest_content.png
Strong static typing:
- allows comprehensive compile-time checks
- is stable, consistent; predictable at run-time

Strong static typing:
- is inflexible, rigid; requires defining when program is written
- is not dynamic, unchanging; type not replaceable at run-time

---
Know what you want, choose tool candidates
Decide if you wish to consume Mind Budget to learn something new.

* Go has built-in concurrency
.background images/devfest_content.png
The routine below prints a  "+", every second, forever. 

.code code/concurrency/main.go /10 /,/20 /

The routine below prints a  ".", every second, forever. 

.code code/concurrency/main.go /20 /,/30 /

* Concurrent plus and dot
.background images/devfest_content.png
Modify the code below to run plus and dot concurrently.

.play -edit code/concurrency/main.go /30 /,/40 /

* Concurrency: javascript edition
.background images/devfest_content.png

  function plus(){
    setInterval( ()=>{console.log('+')}, 1000 );
  }

  function dot(){
    setInterval( ()=>{console.log('.')}, 1000 );
  }

F12 to display web console, copy the above functions.
Execute:

  plus()
  dot()

((webworker ≈ java thread) = os-level thread) ≠ goroutine

: Bedanya apa dengan Golang, JavaScript run disatu thread. Golang run diatas thread.
: Maksudnya, jika satu goroutine block, entire process. OS akan spawn new thread, dan thread tersebut akan handle goroutine
: A million goroutines can share one thread.

* How "good" is  Go's Concurrency?
.background images/devfest_content.png

Hello world static content http server:

  func main() {
          http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
                  w.Write([]byte("Hello World!\n"))
          })
  
          log.Fatal(http.ListenAndServe(":8081", nil))
  }

* How "good" is  Go's Concurrency? (2)
.background images/devfest_content.png
Go

  Slowest:	0.1247 secs
  Fastest:	0.0001 secs
  Average:	0.0150 secs
  Requests/sec:	27665.5311
  Status code distribution:
    [200]	1000000 responses
  
Node 

  Slowest:	0.2949 secs
  Fastest:	0.0003 secs
  Average:	0.0150 secs
  Requests/sec:	9129.3825
  Status code distribution:
    [200]	1000000 responses

: Golang dapat menangani request lebih banyak dari pada Node.
: Response timenya sama, tetapi jumlah request yang dikerjakan perdetiknya berbeda.

* How "good" is  Go's Concurrency? (3)
.background images/devfest_content.png

  ab -n1000 -c100 http://127.0.0.1:8081/
  Requests per second:    11100.87 [#/sec] (mean)

---

nginx serving "Hello World!":

  ab -n1000 -c100 http://127.0.0.1/
  Requests per second:    9644.04 [#/sec] (mean)

: Lalu berikut saya benchmark dengan apache benchmark
: Mendekati kemampuan NGINX 
: Hanya dengan menggunakan code simple saja, engineer pemula saja sudah bisa membuat aplikasi yang concurrent

* Go is portable
.background images/devfest_content.png
If your go code does not reference any platform specific features;
(eg. Load Windows DLLs)

and does not use c-libraries (which are compiled for specific platforms);

you can:

  CGO_ENABLED=0 GOOS=linux GOARCH=386 go build helloWorld.go

See the complete list here:
.link https://golang.org/doc/install/source#environment 

* Discussion Time! 
.background images/devfest_end.png
: Any Question so far?
